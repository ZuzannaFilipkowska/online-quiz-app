@page "/"

@using Grpc.Net.Client
@using Grpc.Net.Client.Web
@using QuizApp
@inject NavigationManager NavigationManager

<div class="quiz-list-container">
    <h2>Lista Quizów</h2>
    <button class="open-modal-button" @onclick="OpenModal">Dodaj Nowy Quiz</button>

    @if (quizzes == null)
    {
        <div class="loading-message">
            <p><em>Ładowanie quizów...</em></p>
        </div>
    }
    else if (quizzes.Count == 0)
    {
        <div class="no-quizzes-message">
            <p>Brak dostępnych quizów.</p>
        </div>
    }
    else
    {
        <div class="quiz-list">
            @foreach (var quiz in quizzes)
            {
                <div class="quiz-card">
                    <h3>@quiz.Title</h3>
                    <p>@quiz.Description</p>
                    <button class="view-quiz-button" @onclick="() => ViewQuiz(quiz.Id)">Zobacz szczegóły</button>
                </div>
            }
        </div>
    }
</div>

@if (isModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close-button" @onclick="CloseModal">&times;</span>
            <h3>Dodaj Nowy Quiz</h3>
            <div>
                <label for="title">Tytuł:</label>
                <input id="title" @bind="newQuizTitle" placeholder="Wpisz tytuł quizu" />
            </div>
            <div>
                <label for="description">Opis:</label>
                <textarea id="description" @bind="newQuizDescription" placeholder="Wpisz opis quizu"></textarea>
            </div>

            <div class="questions-section">
                <h3>Pytania</h3>
                <div>
                    @if (newQuizQuestions.Count == 0)
                    {
                        <div class="no-quizzes-message">
                            <p>Brak dodanych pytań.</p>
                        </div>
                    }
                    else
                    {
                        <ul>
                            @foreach (var question in newQuizQuestions)
                            {
                                <li>
                                    <strong>@question.QuestionText</strong>
                                </li>
                            }
                        </ul>
                    }
                </div>

                <div class="question">
                    <h4>Dodaj pytanie</h4>
                    <label for="question-text">Treść pytania:</label>
                    <input id="question-text" @bind="newQuestionText" placeholder="Wpisz pytanie" />

                    <h4>Dodaj odpowiedzi</h4>
                    <div>
                        @foreach (var answer in newAnswers)
                        {
                            <div>
                                <input @bind="answer.Text" placeholder="Treść odpowiedzi" />
                                <input type="checkbox" @bind="answer.IsCorrect" /> Poprawna?
                            </div>
                        }
                        <button class="questions-section-btn" @onclick="AddNewAnswer">Dodaj odpowiedź</button>
                    </div>
                    <button class="questions-section-btn" @onclick="AddQuestion">Dodaj pytanie do quizu</button>
                </div>
            </div>

            @if (showValidationMessage)
            {
                <div class="validation-message">
                    <p>Wszystkie pola muszą być wypełnione!</p>
                    <p>Wymagane jest dodanie min jednego pytania.</p>
                </div>
            }

            <button class="add-quiz-button" @onclick="AddNewQuiz">Dodaj Quiz</button>
        </div>
    </div>
}

@code {
    private List<Quiz> quizzes = new(); 
    private string newQuizTitle = string.Empty;
    private string newQuizDescription = string.Empty;
    private bool isModalOpen = false;
    private bool showValidationMessage = false;
    private string newQuestionText = string.Empty;
    private List<Answer> newAnswers = new();
    private List<Question> newQuizQuestions = new();

    private void AddNewAnswer()
    {
        newAnswers.Add(new Answer { Text = string.Empty, IsCorrect = false });
    }

    private void AddQuestion()
    {
        if (!string.IsNullOrWhiteSpace(newQuestionText) && newAnswers.Any())
        {
            var question = new Question
            {
                QuestionText = newQuestionText,
                Answers = { newAnswers.Select(a => new Answer { Text = a.Text, IsCorrect = a.IsCorrect }) }
            };

            newQuizQuestions.Add(question);
            newQuestionText = string.Empty;
            newAnswers.Clear();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var channel = GrpcChannel.ForAddress("http://localhost:5195/", new GrpcChannelOptions
            {
                HttpHandler = new GrpcWebHandler(new HttpClientHandler())
            });

            var client = new QuizService.QuizServiceClient(channel);
            var response = await client.GetQuizzesAsync(new Empty());
            quizzes = response.Quizzes.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania quizów: {ex.Message}");
        }
    }

    private async Task AddNewQuiz()
    {
        if (string.IsNullOrWhiteSpace(newQuizTitle) || string.IsNullOrWhiteSpace(newQuizDescription) || !newQuizQuestions.Any())
        {
            showValidationMessage = true;
            return;
        }

        try
        {
            using var channel = GrpcChannel.ForAddress("http://localhost:5195/", new GrpcChannelOptions
            {
                HttpHandler = new GrpcWebHandler(new HttpClientHandler())
            });

            var client = new QuizService.QuizServiceClient(channel);

            var newQuizRequest = new AddQuizRequest
            {
                Title = newQuizTitle,
                Description = newQuizDescription,
                Questions =
                {
                    newQuizQuestions.Select(q => new QuizApp.Question
                    {
                        QuestionText = q.QuestionText,
                        Answers =
                        {
                            q.Answers.Select(a => new QuizApp.Answer
                            {
                                Text = a.Text,
                                IsCorrect = a.IsCorrect
                            })
                        }
                    })
                }
            };

            await client.AddQuizAsync(newQuizRequest);

            // Odświeżanie listy quizów
            var quizzesResponse = await client.GetQuizzesAsync(new Empty());
            quizzes = quizzesResponse.Quizzes.ToList();

            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas dodawania nowego quizu: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        newQuizTitle = string.Empty;
        newQuizDescription = string.Empty;
        newQuizQuestions.Clear();
        newAnswers.Clear();
        isModalOpen = false;
        showValidationMessage = false;
    }

    private void OpenModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void ViewQuiz(string quizId)
    {
        NavigationManager.NavigateTo($"/quiz/{quizId}");
    }
}

    <style>
    .quiz-list-container {
        margin: 20px auto;
        padding: 20px;
        max-width: 800px;
        font-family: Arial, sans-serif;
        text-align: center;
    }

    h2 {
        color: #333;
    }

    .open-modal-button {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
        margin-bottom: 20px;
    }

    .open-modal-button:hover {
        background-color: #218838;
    }

    .loading-message, .no-quizzes-message {
        text-align: center;
        font-size: 18px;
        color: #777;
        margin: 20px 0;
    }

    .quiz-list {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .quiz-card {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        width: 250px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .quiz-card h3 {
        margin: 10px 0;
        font-size: 18px;
        color: #333;
    }

    .quiz-card p {
        font-size: 14px;
        color: #555;
    }

    .view-quiz-button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
        margin-top: 10px;
    }

    .view-quiz-button:hover {
        background-color: #0056b3;
    }

    .modal {
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        width: 400px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .close-button {
        font-size: 24px;
        font-weight: bold;
        color: #aaa;
        float: right;
        cursor: pointer;
    }

    .close-button:hover {
        color: black;
    }

    .add-quiz-button {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
        margin-top: 15px;
    }

    .add-quiz-button:hover {
        background-color: #218838;
    }

    .modal-content input, .modal-content textarea {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 10px;
    }

       .question-container {
        margin-bottom: 15px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .question-container p {
        margin: 0 0 10px 0;
        font-weight: bold;
    }

    .question-container ul {
        list-style-type: none;
        padding: 0;
    }

    .question-container li {
        margin-bottom: 5px;
    }

    .questions-section {
        margin: 20px 0 30px 0;
    }

    .question {
    margin-top: 10px;
    border: 1px solid #28a745;
    padding: 1rem;
    border-radius: 6px;
    }

    .questions-section-btn {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 6px 10px;
        font-size: 12px;
        cursor: pointer;
        margin-top: 15px;
    }

</style>
